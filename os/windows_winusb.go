package os

type libusb_hid_request_type uint8
const (
	HID_REQ_GET_REPORT libusb_hid_request_type = 0x01,
	HID_REQ_GET_IDLE libusb_hid_request_type = 0x02,
	HID_REQ_GET_PROTOCOL libusb_hid_request_type = 0x03,
	HID_REQ_SET_REPORT libusb_hid_request_type = 0x09,
	HID_REQ_SET_IDLE libusb_hid_request_type = 0x0A,
	HID_REQ_SET_PROTOCOL libusb_hid_request_type = 0x0B
)

type libusb_hid_report_type uint8
const (
	HID_REPORT_TYPE_INPUT libusb_hid_report_type = 0x01,
	HID_REPORT_TYPE_OUTPUT libusb_hid_report_type = 0x02,
	HID_REPORT_TYPE_FEATURE libusb_hid_report_type = 0x03
)

type USB_CONNECTION_STATUS uint8 
const (
	NoDeviceConnected USB_CONNECTION_STATUS = iota
	DeviceConnected USB_CONNECTION_STATUS
	DeviceFailedEnumeration USB_CONNECTION_STATUS
	DeviceGeneralFailure USB_CONNECTION_STATUS
	DeviceCausedOvercurrent USB_CONNECTION_STATUS
	DeviceNotEnoughPower USB_CONNECTION_STATUS
	DeviceNotEnoughBandwidth USB_CONNECTION_STATUS
	DeviceHubNestedTooDeeply USB_CONNECTION_STATUS
	DeviceInLegacyHub USB_CONNECTION_STATUS
)

type USB_HUB_NODE uint8
const (
	UsbHub USB_HUB_NODE = iota
	UsbMIParent USB_HUB_NODE
)

type USBD_PIPE_TYPE uint8
const (
	UsbdPipeTypeControl USBD_PIPE_TYPE = iota
	UsbdPipeTypeIsochronous USBD_PIPE_TYPE
	UsbdPipeTypeBulk USBD_PIPE_TYPE
	UsbdPipeTypeInterrupt USBD_PIPE_TYPE
)

/* /!\ These must match the ones from the official libusbk.h */
type _KUSB_FNID uint8
const (
	KUSB_FNID_Init _KUSB_FNID = iota
	KUSB_FNID_Free _KUSB_FNID
	KUSB_FNID_ClaimInterface _KUSB_FNID
	KUSB_FNID_ReleaseInterface _KUSB_FNID
	KUSB_FNID_SetAltInterface _KUSB_FNID
	KUSB_FNID_GetAltInterface _KUSB_FNID
	KUSB_FNID_GetDescriptor _KUSB_FNID
	KUSB_FNID_ControlTransfer _KUSB_FNID
	KUSB_FNID_SetPowerPolicy _KUSB_FNID
	KUSB_FNID_GetPowerPolicy _KUSB_FNID
	KUSB_FNID_SetConfiguration _KUSB_FNID
	KUSB_FNID_GetConfiguration _KUSB_FNID
	KUSB_FNID_ResetDevice _KUSB_FNID
	KUSB_FNID_Initialize _KUSB_FNID
	KUSB_FNID_SelectInterface _KUSB_FNID
	KUSB_FNID_GetAssociatedInterface _KUSB_FNID
	KUSB_FNID_Clone _KUSB_FNID
	KUSB_FNID_QueryInterfaceSettings _KUSB_FNID
	KUSB_FNID_QueryDeviceInformation _KUSB_FNID
	KUSB_FNID_SetCurrentAlternateSetting _KUSB_FNID
	KUSB_FNID_GetCurrentAlternateSetting _KUSB_FNID
	KUSB_FNID_QueryPipe _KUSB_FNID
	KUSB_FNID_SetPipePolicy _KUSB_FNID
	KUSB_FNID_GetPipePolicy _KUSB_FNID
	KUSB_FNID_ReadPipe _KUSB_FNID
	KUSB_FNID_WritePipe _KUSB_FNID
	KUSB_FNID_ResetPipe _KUSB_FNID
	KUSB_FNID_AbortPipe _KUSB_FNID
	KUSB_FNID_FlushPipe _KUSB_FNID
	KUSB_FNID_IsoReadPipe _KUSB_FNID
	KUSB_FNID_IsoWritePipe _KUSB_FNID
	KUSB_FNID_GetCurrentFrameNumber _KUSB_FNID
	KUSB_FNID_GetOverlappedResult _KUSB_FNID
	KUSB_FNID_GetProperty _KUSB_FNID
	KUSB_FNID_COUNT _KUSB_FNID
)

type _HIDP_REPORT_TYPE uint8
const (
	HidP_Input _HIDP_REPORT_TYPE = iota
	HidP_Output _HIDP_REPORT_TYPE
	HidP_Feature _HIDP_REPORT_TYPE
)

const(
	MAX_CTRL_BUFFER_LENGTH = 4096
	MAX_USB_DEVICES = 256
	MAX_USB_STRING_LENGTH = 128
	MAX_HID_REPORT_SIZE = 1024
	MAX_HID_DESCRIPTOR_SIZE = 256
	MAX_GUID_STRING_LENGTH = 40
	MAX_PATH_LENGTH = 128
	MAX_KEY_LENGTH	= 256
	LIST_SEPARATOR	= ';'
   )
   
   /*
	* Multiple USB API backend support
	*/
   const (
	USB_API_UNSUPPORTED = 0
	USB_API_HUB = 1
	USB_API_COMPOSITE = 2
	USB_API_WINUSBX = 3
	USB_API_HID = 4
	USB_API_MAX = 5
   // The following is used to indicate if the HID or composite extra props have already been set.
	USB_API_SET = (1 << USB_API_MAX)
   
   // Sub-APIs for WinUSB-like driver APIs (WinUSB, libusbK, libusb-win32 through the libusbK DLL)
   // Must have the same values as the KUSB_DRVID enum from libusbk.h
	SUB_API_NOTSET = -1
	SUB_API_LIBUSBK = 0
	SUB_API_LIBUSB0 = 1
	SUB_API_WINUSB	= 2
	SUB_API_MAX = 3
   )
   
   const(
	   LIBUSB_DT_HID_SIZE = 9 
	   HID_MAX_REPORT_SIZE	= 1024
	   HID_IN_EP = 0x81
	   HID_OUT_EP = 0x02
   )
   
   const(
	   CR_SUCCESS = 0x00000000
	   CR_NO_SUCH_DEVNODE = 0x0000000D
   
	USB_DEVICE_DESCRIPTOR_TYPE	= LIBUSB_DT_DEVICE
	USB_CONFIGURATION_DESCRIPTOR_TYPE = LIBUSB_DT_CONFIG
	USB_STRING_DESCRIPTOR_TYPE	= LIBUSB_DT_STRING
	USB_INTERFACE_DESCRIPTOR_TYPE = LIBUSB_DT_INTERFACE
	USB_ENDPOINT_DESCRIPTOR_TYPE = LIBUSB_DT_ENDPOINT
   
	USB_REQUEST_GET_STATUS	= LIBUSB_REQUEST_GET_STATUS
	USB_REQUEST_CLEAR_FEATURE = LIBUSB_REQUEST_CLEAR_FEATURE
	USB_REQUEST_SET_FEATURE = LIBUSB_REQUEST_SET_FEATURE
	USB_REQUEST_SET_ADDRESS = LIBUSB_REQUEST_SET_ADDRESS
	USB_REQUEST_GET_DESCRIPTOR	= LIBUSB_REQUEST_GET_DESCRIPTOR
	USB_REQUEST_SET_DESCRIPTOR	= LIBUSB_REQUEST_SET_DESCRIPTOR
	USB_REQUEST_GET_CONFIGURATION = LIBUSB_REQUEST_GET_CONFIGURATION
	USB_REQUEST_SET_CONFIGURATION = LIBUSB_REQUEST_SET_CONFIGURATION
	USB_REQUEST_GET_INTERFACE = LIBUSB_REQUEST_GET_INTERFACE
	USB_REQUEST_SET_INTERFACE = LIBUSB_REQUEST_SET_INTERFACE
	USB_REQUEST_SYNC_FRAME	= LIBUSB_REQUEST_SYNCH_FRAME
   
	   USB_GET_NODE_INFORMATION = 258
	   USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION = 260
	   USB_GET_NODE_CONNECTION_NAME = 261
	   USB_GET_HUB_CAPABILITIES = 271
   )
   
   const(
	   SHORT_PACKET_TERMINATE = 0x01
	AUTO_CLEAR_STALL = 0x02
	PIPE_TRANSFER_TIMEOUT	= 0x03
	IGNORE_SHORT_PACKETS = 0x04
	ALLOW_PARTIAL_READS = 0x05
	AUTO_FLUSH = 0x06
	RAW_IO = 0x07
	MAXIMUM_TRANSFER_SIZE	= 0x08
	AUTO_SUSPEND = 0x81
	SUSPEND_DELAY = 0x83
	DEVICE_SPEED = 0x01
	LowSpeed = 0x01
	FullSpeed = 0x02
	HighSpeed = 0x03
   )
   
   const HIDP_STATUS_SUCCESS = 0x110000